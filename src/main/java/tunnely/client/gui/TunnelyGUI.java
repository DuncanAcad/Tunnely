package tunnely.client.gui;

import com.formdev.flatlaf.FlatDarkLaf;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import tunnely.client.TunnelyClient;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Arrays;
import java.util.stream.Stream;

public class TunnelyGUI {
    private JFrame frame;
    private JTextField nameField;
    private JButton hostButton;
    private JButton joinButton;
    private JTextField middlemanField;
    private JPasswordField passwordField;
    private JPanel mainPanel;
    private JTextField portField;
    private JPanel buttonsPanel;

    public TunnelyGUI() {
        frame = new JFrame();
        frame.add(mainPanel);
        frame.setVisible(true);
        frame.setTitle("Tunnely");
        frame.pack();
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
        hostButton.addActionListener(a -> {
            String[] mmParts = middlemanField.getText().split(":");
            setAllComponentsEnabled(false);
            new Thread(() -> {
                try {
                    TunnelyClient.runTunnelyClient(mmParts[0], Integer.parseInt(mmParts[1]), false, nameField.getText(), new String(passwordField.getPassword()), Integer.parseInt(portField.getText()));
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(frame, "Failed to start Tunnely!\n" + e, "Tunnely: Error", JOptionPane.ERROR_MESSAGE);
                }
                setAllComponentsEnabled(true);
            }).start();
        });
        joinButton.addActionListener(a -> {
            String[] mmParts = middlemanField.getText().split(":");
            setAllComponentsEnabled(false);
            new Thread(() -> {
                try {
                    TunnelyClient.runTunnelyClient(mmParts[0], Integer.parseInt(mmParts[1]), true, nameField.getText(), new String(passwordField.getPassword()), Integer.parseInt(portField.getText()));
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(frame, "Failed to start Tunnely!\n" + e, "Tunnely: Error", JOptionPane.ERROR_MESSAGE);
                }
                setAllComponentsEnabled(true);
            }).start();
        });
    }

    public static void main(String[] args) {
        FlatDarkLaf.setup();
        new TunnelyGUI();
    }

    private void setAllComponentsEnabled(boolean b) {
        Stream.concat(Arrays.stream(mainPanel.getComponents()), Arrays.stream(buttonsPanel.getComponents())).forEach(c -> c.setEnabled(b));
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(6, 2, new Insets(5, 5, 5, 5), -1, -1));
        nameField = new JTextField();
        mainPanel.add(nameField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Room Name:");
        mainPanel.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Room Password:");
        mainPanel.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonsPanel = new JPanel();
        buttonsPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(buttonsPanel, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        hostButton = new JButton();
        hostButton.setText("Host");
        buttonsPanel.add(hostButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        joinButton = new JButton();
        joinButton.setText("Join");
        buttonsPanel.add(joinButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Middleman:");
        mainPanel.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        middlemanField = new JTextField();
        middlemanField.setText("tunnely.duncanruns.xyz:7777");
        mainPanel.add(middlemanField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, -1), null, 0, false));
        passwordField = new JPasswordField();
        mainPanel.add(passwordField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Port:");
        mainPanel.add(label4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        portField = new JTextField();
        mainPanel.add(portField, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
